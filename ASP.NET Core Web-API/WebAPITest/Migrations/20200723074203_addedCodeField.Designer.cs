// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPITest.Models;

namespace WebAPITest.Migrations
{
    [DbContext(typeof(WebAPIContext))]
    [Migration("20200723074203_addedCodeField")]
    partial class addedCodeField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebAPITest.Models.City", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("area")
                        .HasColumnType("real");

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<int?>("countryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("foundation")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("population")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("countryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WebAPITest.Models.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("flagImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("officialLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("population")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WebAPITest.Models.Sightseen", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("cityId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("cityId");

                    b.ToTable("Sightseens");
                });

            modelBuilder.Entity("WebAPITest.Models.City", b =>
                {
                    b.HasOne("WebAPITest.Models.Country", "country")
                        .WithMany("Cities")
                        .HasForeignKey("countryId");
                });

            modelBuilder.Entity("WebAPITest.Models.Sightseen", b =>
                {
                    b.HasOne("WebAPITest.Models.City", "city")
                        .WithMany("Sightseens")
                        .HasForeignKey("cityId");
                });
#pragma warning restore 612, 618
        }
    }
}
